/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Main;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.lang.Thread.MAX_PRIORITY;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author asus
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    
    Offlinechartdata offlinechartdata=new Offlinechartdata();  //Class for Offlinechart
    private static HttpURLConnection connection; //Making http connection
    
    BufferedReader reader;    //next three lines for reading input form API
    String line=null;
    StringBuffer content=new StringBuffer();
    JSONArray jsonarray;
    String graphtype="bar";  //setting for barchar and linechart
    String flag="india";
    int index;               //index of state api from jcombobox
    
    public Frame() {
        initComponents();
        //jsondata();         //calling function to get the data from API
        indiachart();
    }
    
    Thread th;
    public void jsondata ()
    {
        th=new Thread(new Runnable() {

            @Override
            public void run() 
            {
                try{
            URL url=new URL("https://api.apify.com/v2/datasets/58a4VXwBBF0HtxuQa/items?format=json&clean=1");
            connection=(HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            //connection.setConnectTimeout(5000);
            //connection.setReadTimeout(5000);
            int status=connection.getResponseCode();
                if(status>299)
                {
                    reader=new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                    while((line=reader.readLine())!=null){
                        content.append(line);
                    }
                    reader.close();
                }
                else{
                    reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    while((line=reader.readLine())!=null){
                    content.append(line);
                    }
                  reader.close();
                }
                
                
                
                jsonarray=new JSONArray(content.toString());
                
                
                
                if(jsonarray.length()!=0)
                {
                    offlinechartdata.storedata(content.toString());   //Adding the data into file
                }
                
                
            
            
                
                
        } catch (MalformedURLException ex) {
            ex.getStackTrace();
        } catch (IOException ex) {
            ex.getStackTrace();
        }
        finally
        {
            connection.disconnect();
            /*
            new Refresh();
            */
            //indiachart();     //when user first open the application, chart of india will be shown on the screen
            if(refresh_value)
                indiachart();
            
        }
  
            }
        });
        th.start();
        th.setPriority(MAX_PRIORITY);
        th.setName("finish");
   }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        totalpanel = new javax.swing.JPanel();
        activepanel = new javax.swing.JPanel();
        recoverpanel = new javax.swing.JPanel();
        deathpanel = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        record = new javax.swing.JLabel();
        linechart = new javax.swing.JButton();
        barchart = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GRAPHICAL ANALYSIS");
        setResizable(false);

        jScrollPane1.setBackground(new java.awt.Color(0, 255, 204));

        totalpanel.setBackground(new java.awt.Color(255, 255, 255));
        totalpanel.setLayout(new javax.swing.BoxLayout(totalpanel, javax.swing.BoxLayout.LINE_AXIS));

        activepanel.setBackground(new java.awt.Color(255, 255, 255));
        activepanel.setLayout(new javax.swing.BoxLayout(activepanel, javax.swing.BoxLayout.LINE_AXIS));

        recoverpanel.setBackground(new java.awt.Color(255, 255, 255));
        recoverpanel.setLayout(new javax.swing.BoxLayout(recoverpanel, javax.swing.BoxLayout.LINE_AXIS));

        deathpanel.setBackground(new java.awt.Color(255, 255, 255));
        deathpanel.setLayout(new javax.swing.BoxLayout(deathpanel, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deathpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(recoverpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 842, Short.MAX_VALUE)
                        .addComponent(activepanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(850, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(totalpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(activepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(recoverpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addGap(34, 34, 34)
                .addComponent(deathpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
        );

        jScrollPane1.setViewportView(jPanel2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "India", "Andaman and Nicobar Islands", "Andra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chandigarh", "Chhattisgarh", "Dadar Nagar Haveli", "Delhi", "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jammu and Kashmir", "Jharkhand", "Karnataka", "Kerala", "Ladakh", "Madya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Orissa", "Punjab", "Rajasthan", "Tamil Nadu", "Telagana", "Tripura", "Uttarankhand", "Uttar Pradesh", "West Bengal" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        record.setBackground(new java.awt.Color(255, 51, 102));
        record.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        record.setText("Record");
        record.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        linechart.setText("Linechart");
        linechart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linechartActionPerformed(evt);
            }
        });

        barchart.setText("Barchart");
        barchart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barchartActionPerformed(evt);
            }
        });

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(barchart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(linechart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(37, 37, 37)))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linechart, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barchart, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1234, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Graph of india
    public void indiachart()
    {
        if(jsonarray==null)
        {
           
                    String data=offlinechartdata.readdata();   //Collecting the data from file
                    jsonarray=new JSONArray(data);
                    
        }
        
        DefaultCategoryDataset total=new DefaultCategoryDataset();   //making the chart from JFreeChart
        DefaultCategoryDataset active=new DefaultCategoryDataset();
        DefaultCategoryDataset recovered=new DefaultCategoryDataset();
        DefaultCategoryDataset death=new DefaultCategoryDataset();
            int j=1;
            for(int i=311;i<=320&&i<jsonarray.length();i++)
            {
            JSONObject jsonobj=jsonarray.getJSONObject(i);
            total.setValue(Integer.parseInt((jsonobj.get("totalCases")).toString()), "Last 10 days record", "DAY "+j);
            active.setValue(Integer.parseInt((jsonobj.get("activeCases")).toString()), "Last 10 days record", "DAY "+j);
            recovered.setValue(Integer.parseInt((jsonobj.get("recovered")).toString()), "Last 10 days record", "DAY "+j);
            death.setValue(Integer.parseInt((jsonobj.get("deaths")).toString()), "Last 10 days record", "DAY "+j);
            j++;
            }
        JFreeChart jchart1,jchart2,jchart3,jchart4;
        if(graphtype.equals("bar"))
        {
        jchart1=ChartFactory.createBarChart("Total Cases","Days", "Number", total, PlotOrientation.VERTICAL, true, true, false);
        jchart2=ChartFactory.createBarChart("Active Cases","Days", "Number", active, PlotOrientation.VERTICAL, true, true, false);
        
        jchart3=ChartFactory.createBarChart3D("Recovered Cases","Days", "Number", recovered, PlotOrientation.VERTICAL, true, true, false);
        
        jchart4=ChartFactory.createBarChart("Death","Days", "Number", death, PlotOrientation.VERTICAL, true, true, false);
        }
        else
        {
            jchart1=ChartFactory.createLineChart("Total Cases","Days", "Number", total, PlotOrientation.VERTICAL, true, true, false);
            jchart2=ChartFactory.createLineChart("Active Cases","Days", "Number", active, PlotOrientation.VERTICAL, true, true, false);
        
            jchart3=ChartFactory.createLineChart("Recovered Cases","Days", "Number", recovered, PlotOrientation.VERTICAL, true, true, false);
        
            jchart4=ChartFactory.createLineChart("Death","Days", "Number", death, PlotOrientation.VERTICAL, true, true, false);
        
        }
        CategoryPlot plot=new CategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);


        /*
        CategoryPlot plot1 = (CategoryPlot) jchart1.getPlot();
NumberAxis rangeAxis = (NumberAxis) plot1.getRangeAxis();
rangeAxis.setRange(0, 4000);
        */

        /*
        ChartFrame chartframe=new ChartFrame("Student Record",jchart1,true);
        chartframe.setVisible(true);
        chartframe.setSize(500,400);
        */
        ChartPanel chartpanel1=new ChartPanel(jchart1);
        ChartPanel chartpanel2=new ChartPanel(jchart2);
        
        ChartPanel chartpanel3=new ChartPanel(jchart3);
        
        ChartPanel chartpanel4=new ChartPanel(jchart4);
        
        totalpanel.removeAll();             //Four Panel
        totalpanel.add(chartpanel1);
        totalpanel.updateUI();
        
        
        activepanel.removeAll();
        activepanel.add(chartpanel2);
        activepanel.updateUI();
        
        
        recoverpanel.removeAll();
        recoverpanel.add(chartpanel3);
        recoverpanel.updateUI();
        
        
        deathpanel.removeAll();
        deathpanel.add(chartpanel4);
        deathpanel.updateUI();
    }
    
    //State Chart 
    public void statechart(int index)
    {
        if(jsonarray==null)
        {
            
                    String data=offlinechartdata.readdata();   //Collecting the data from file
                    jsonarray=new JSONArray(data);
        }
        DefaultCategoryDataset total=new DefaultCategoryDataset();
        
        DefaultCategoryDataset active=new DefaultCategoryDataset();
        DefaultCategoryDataset recovered=new DefaultCategoryDataset();
        DefaultCategoryDataset death=new DefaultCategoryDataset();
        int j=1;
        for(int i=311;i<=320&&i<jsonarray.length();i++)
        {
            JSONObject jsonobj=jsonarray.getJSONObject(i);
            JSONArray jsonstatearray=jsonobj.getJSONArray("regionData");
            JSONObject jsonstateobj=jsonstatearray.getJSONObject(index-1);
            total.setValue(Integer.parseInt((jsonstateobj.get("totalInfected")).toString()), "Last 10 days record", "DAY "+j);
            
            active.setValue(Integer.parseInt((jsonstateobj.get("newRecovered")).toString()), "Last 10 days record", "DAY "+j);
            recovered.setValue(Integer.parseInt((jsonstateobj.get("recovered")).toString()), "Last 10 days record", "DAY "+j);
            death.setValue(Integer.parseInt((jsonstateobj.get("deceased")).toString()), "Last 10 days record", "DAY "+j);
            j++;
        }
        
        
        JFreeChart jchart1,jchart2,jchart3,jchart4;
        if(graphtype.equals("bar"))
        {
        jchart1=ChartFactory.createBarChart("Total Infected","Days", "Number", total, PlotOrientation.VERTICAL, true, true, false);
        
        jchart2=ChartFactory.createBarChart("New Recovered Cases","Days", "Number", active, PlotOrientation.VERTICAL, true, true, false);
        
        jchart3=ChartFactory.createBarChart3D("Recovered Cases","Days", "Number", recovered, PlotOrientation.VERTICAL, true, true, false);
        
        jchart4=ChartFactory.createBarChart("Death","Days", "Number", death, PlotOrientation.VERTICAL, true, true, false);
        }
        else
        {
            
        jchart1=ChartFactory.createLineChart("Total Infected","Days", "Number", total, PlotOrientation.VERTICAL, true, true, false);
        
        jchart2=ChartFactory.createLineChart("New Recovered Cases","Days", "Number", active, PlotOrientation.VERTICAL, true, true, false);
        
        jchart3=ChartFactory.createLineChart("Recovered Cases","Days", "Number", recovered, PlotOrientation.VERTICAL, true, true, false);
        
        jchart4=ChartFactory.createLineChart("Death","Days", "Number", death, PlotOrientation.VERTICAL, true, true, false);
        }
        
        CategoryPlot plot=new CategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);
        
        
        ChartPanel chartpanel1=new ChartPanel(jchart1);
        
        
        ChartPanel chartpanel2=new ChartPanel(jchart2);
        
        ChartPanel chartpanel3=new ChartPanel(jchart3);
        
        ChartPanel chartpanel4=new ChartPanel(jchart4);
        
        totalpanel.removeAll();
        totalpanel.add(chartpanel1);
        totalpanel.updateUI();
        
        
        activepanel.removeAll();
        activepanel.add(chartpanel3);
        activepanel.updateUI();
        
        
        recoverpanel.removeAll();
        recoverpanel.add(chartpanel2);
        recoverpanel.updateUI();
        
        
        deathpanel.removeAll();
        deathpanel.add(chartpanel4);
        deathpanel.updateUI();
    }
    
    
    //when it fails to get data from API due to internet connection ,then dialog msg will appear
    public void showwindow()
    {
        JOptionPane.showMessageDialog(totalpanel, "Unable to retrieve data,Please Check your Internet Connection");
    }
    
    //choosing from option to make chart of desired state
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String selectedvalue=jComboBox1.getSelectedItem().toString();
        index=jComboBox1.getSelectedIndex();
        
        if(selectedvalue.equals("India"))
        {
            flag="india";
            indiachart();
        }
        else
        {
            flag="state";
           statechart(index);
        }
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //code for line chart ... when user click on line chart 
    private void linechartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linechartActionPerformed
        // TODO add your handling code here:
        graphtype="line";
        if(flag.equals("india"))
            indiachart();
        else
            statechart(index);
    }//GEN-LAST:event_linechartActionPerformed
    
    
    //code for Bar chart ... when user click on Bar chart 
    private void barchartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barchartActionPerformed
        // TODO add your handling code here:
        graphtype="bar";
        
        if(flag.equals("india"))
            indiachart();
        else
            statechart(index);
    }//GEN-LAST:event_barchartActionPerformed

    Boolean refresh_value=false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jsondata();
        refresh_value=true;
        indiachart();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activepanel;
    private javax.swing.JButton barchart;
    private javax.swing.JPanel deathpanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton linechart;
    private javax.swing.JLabel record;
    private javax.swing.JPanel recoverpanel;
    private javax.swing.JPanel totalpanel;
    // End of variables declaration//GEN-END:variables
}
